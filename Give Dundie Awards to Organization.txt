title Give Dundie Awards to Organization


#CONTROLLER
participant User
participant AwardController
participant OrganizationService
participant AwardService
participant EmployeeService


participant AwardOperationLogService

participant EmployeeRepository
participant OrganizationRepository
participant AwardCache
participant MessageBroker
participant StreamProcessor
participant ActivityService
participant ActivityRepository
participant FailureProcessService
participant AwardRepository


User->AwardController: /give-dundie-awards/{organizationId}
alt #a3001f Organization is valid
AwardController->AwardController: Bean validate \n@BlockedOrganizationId
AwardController->OrganizationService: isBlocked(organizationId)\nexistsOrganization(organizationId)
    AwardController->AwardController: generate Request UUID
    AwardController->AwardService: giveDundieAwards(UUID,long organizationId)
    AwardService->EmployeeService:fetchEmployeeRollbackData(uuid, organizationId)
    EmployeeService->AwardService:String rollbackData
AwardService->AwardOperationLogService:createAwardOperationLog(uuid, rollbackData)
AwardService->EmployeeService:addDundieAwardToEmployees(uuid, organizationId)
EmployeeService->EmployeeRepository:increaseAwardsToEmployeesNative(organizationId)
AwardService<-EmployeeRepository:totalUpdatedRecords
    AwardService->OrganizationService:block(uuid, organizationId)
    OrganizationService->OrganizationRepository:blockOrganizationById(UUID,organizationId)\nChange:\norganization.blocked:true\norganization.blocked_by:UUID
    AwardService->AwardCache: increseAwards(totalAwards)
    AwardService->MessageBroker: publish(AWARD_ORGANIZATION_SUCCESS_EVENT[UUID, instant, totalAffectedEmployees, totalAwards])
    AwardService->AwardController:Success (log totalUpdatedRecords)
    AwardController->User: Ok 200: \nAwarded Organization
else Organization is blocked
    AwardController->User: Error 400: \nThe organization is blocked\n and cannot perform this operation.
else Organization is blocked
    AwardController->User: Error 404: \nOrganization with id: \n{organizationId} not found
end


MessageBroker-->StreamProcessor:process(AWARD_ORGANIZATION_SUCCESS_EVENT[UUID, instant, totalAffectedEmployees, totalAwards])
StreamProcessor->ActivityService:handleAwardOrganizationSuccess(AWARD_ORGANIZATION_SUCCESS_EVENT)

# REPEATABLE SAVE ACTIVITY
ActivityService->ActivityService:repeatableSaveActivity(UUID)
group #1f77b4 repeatableSaveActivity(UUID) #white
    ActivityService->ActivityService: toActivity(AWARD_ORGANIZATION_SUCCESS_EVENT)
    loop Retry until success or ENV{retrySaveActivitiesMaxAttempts}
        ActivityService->ActivityService: await(attempt * ENV{timeToWaitRetry})
        alt Activity save success
            ActivityService->ActivityRepository: saveActivity(Activity)
            ActivityService->MessageBroker: publish(SAVE_ACTIVITY_AWARD_ORGANIZATION_SUCCESS_EVENT[UUID, instant, Activity])
        else Retry save failure
            ActivityService->ActivityService: increaseAttempt
            ActivityService->MessageBroker: publish(SAVE_ACTIVITY_AWARD_ORGANIZATION_RETRY_EVENT[UUID, instant, attempt, Activity])
        else Reach max attempts: ENV{retrySaveActivitiesMaxAttempts}
            ActivityService->MessageBroker: publish(SAVE_ACTIVITY_AWARD_ORGANIZATION_FAILURE_EVENT[UUID, instant, Activity])
        end
    end
end


MessageBroker-->StreamProcessor:process(SAVE_ACTIVITY_AWARD_ORGANIZATION_RETRY_EVENT[UUID, instant, attempt, Activity])
StreamProcessor->ActivityService:handleSaveActivityAwardOrganizationRetry(SAVE_ACTIVITY_AWARD_ORGANIZATION_RETRY_EVENT)
ActivityService->ActivityService:repeatableSaveActivity(UUID)
ref over ActivityService, MessageBroker #D4E4F0: Repeatable Save Activity Process


MessageBroker-->StreamProcessor: process(SAVE_ACTIVITY_AWARD_ORGANIZATION_SUCCESS_EVENT[UUID, instant, Activity])
StreamProcessor->AwardService: handleSuccessSaveActivityAwardOrganization(SAVE_ACTIVITY_AWARD_ORGANIZATION_SUCCESS_EVENT)
AwardService->OrganizationService:retryableUnblockOrganization(UUID,organizationId)
AwardService->AwardCache: decreaseAwards(totalAwards)


# REPEATABLE ORGANIZATION UNBLOCK
group #ff7f0e repeatableUnblockOrganization(UUID) #white
    loop Retry until success or ENV{retryUnblockOrganizationsMaxAttempts}
        OrganizationService->OrganizationService: await(attempt * ENV{timeToWaitRetry})
        alt Organization unblock success
            OrganizationService->OrganizationRepository: unblockOrganization(Organization)
            OrganizationService->MessageBroker: publish(UNBLOCK_ORGANIZATION_SUCCESS_EVENT[UUID, instant, Organization])
        else Retry unblock failure
            OrganizationService->OrganizationService: increaseAttempt
            OrganizationService->MessageBroker: publish(UNBLOCK_ORGANIZATION_RETRY_EVENT[UUID, instant, attempt, Organization])
        else Reach max attempts: ENV{retryUnblockOrganizationsMaxAttempts}
            OrganizationService->MessageBroker: publish(UNBLOCK_ORGANIZATION_FAILURE_EVENT[UUID, instant, Organization])
        end
    end
end

MessageBroker-->StreamProcessor: process(UNBLOCK_ORGANIZATION_RETRY_EVENT[UUID, instant, attempt, Organization])
StreamProcessor->OrganizationService: handleUnblockOrganizationRetry(UNBLOCK_ORGANIZATION_RETRY_EVENT)
ref over OrganizationService, MessageBroker #FCE6D0: Repeatable Organization Unblock Process

MessageBroker-->StreamProcessor: process(UNBLOCK_ORGANIZATION_SUCCESS_EVENT[UUID, instant, Organization])
StreamProcessor->OrganizationService: handleUnblockOrganizationSuccess(UNBLOCK_ORGANIZATION_SUCCESS_EVENT)
OrganizationService->AwardOperationLogService:cleanAwardBatchLogs(UUID)

MessageBroker-->StreamProcessor: process(UNBLOCK_ORGANIZATION_FAILURE_EVENT[UUID, instant, Organization])
StreamProcessor->OrganizationService: handleUnblockOrganizationFailure(UNBLOCK_ORGANIZATION_FAILURE_EVENT)
OrganizationService->FailureProcessService: logFailureProcess(UUID)



MessageBroker-->StreamProcessor: process(SAVE_ACTIVITY_AWARD_ORGANIZATION_FAILURE_EVENT)
StreamProcessor->AwardService: handleSaveActivityAwardOrganizationFailure(SAVE_ACTIVITY_AWARD_ORGANIZATION_FAILURE_EVENT)


# REPEATABLE ROLLBACK
group #2f2e7b repeatableRollback(UUID) #white
    loop Retry until success or ENV{retryAwardRollbackMaxAttempts}
        alt Award rollback success
            AwardService->AwardService: await(attempt * ENV{timeToWaitRetry})
            group rollback(UUID)
                AwardService->AwardOperationLogService: getAwardBatchLogs(UUID)
                AwardRepository->AwardService: List<BatchLogs>
                loop for each List<long> batch in batches
                    AwardService->EmployeeService: removeDundieAwardToEmployees(batch)
                    EmployeeService->EmployeeRepository: decreaseAwardsToEmployees(List<long>)
                end
            end
            AwardService->MessageBroker: publish(AWARD_ORGANIZATION_ROLLBACK_SUCCESS_EVENT[UUID, instant, totalAffectedEmployees, totalAwards])
        else Award rollback failure
            AwardService->AwardService: increaseAttempt
            AwardService->MessageBroker: publish(AWARD_ORGANIZATION_ROLLBACK_RETRY_EVENT[UUID, instant, attempt])
        else Reach max attempts: ENV{retryAwardRollbackMaxAttempts}
            AwardService->MessageBroker: publish(AWARD_ORGANIZATION_ROLLBACK_FAILURE_EVENT[UUID, instant])
        end
    end
end

MessageBroker-->StreamProcessor: process(AWARD_ORGANIZATION_ROLLBACK_RETRY_EVENT[UUID, instant, attempt])
StreamProcessor->AwardService: handleAwardOrganizationRollbackRetry(AWARD_ORGANIZATION_ROLLBACK_RETRY_EVENT)
ref over AwardService, MessageBroker #D6D5E5 : Repeatable Rollback Process


MessageBroker-->StreamProcessor: process(AWARD_ORGANIZATION_ROLLBACK_SUCCESS_EVENT)
StreamProcessor->AwardService: handleAwardOrganizationRollBackSuccess(AWARD_ORGANIZATION_ROLLBACK_SUCCESS_EVENT)
AwardService->OrganizationService:retryableUnblockOrganization(UUID,organizationId)
ref over OrganizationService,MessageBroker #FCE6D0:Referencing Organization Unblock Flow
AwardService->AwardCache: decreaseAwards(totalAwards)

MessageBroker-->StreamProcessor: process(AWARD_ORGANIZATION_ROLLBACK_FAILURE_EVENT[UUID, instant])
StreamProcessor->AwardService: handleAwardOrganizationRollbackFailure(AWARD_ORGANIZATION_ROLLBACK_FAILURE_EVENT)
AwardService->FailureProcessService:logFailureProcess(UUID)
